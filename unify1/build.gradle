apply plugin: 'osgi'
apply plugin: 'java'
apply plugin: 'eclipse'

sourceCompatibility=1.6
targetCompatibility=1.6

// Define integration tests

sourceSets {
	integrationTest {
		java {
			srcDir 'src/integrationtest/java'
		}
		resources {
			srcDir 'src/integrationtest/resources'
		}
		// Add the actual runtimeClasspath to integration tests compile classpath
		compileClasspath += sourceSets.main.runtimeClasspath
	}
}

wrapper {
	gradleVersion = '1.8'
}
	
jar {
    manifest { 
        // TODO: could a Require-Bundle instruction replace the 'feature install ...' in console?
        instruction 'Require-Bundle', 'org.apache.cxf.bundle', 'org.apache.camel.camel-cxf', 'org.springframework.beans', 'org.apache.camel.camel-core'
        instruction 'Import-Package', 'javax.xml.namespace', 'javax.xml.transform', 'org.apache.commons.dbcp', '*'
    }
}

dependencies {
    def camelVersion = "2.10.7"
    def cxfVersion = "2.6.10"
    def activeMqVersion = "5.7.0"

    compile "org.apache.activemq:activemq-camel:${activeMqVersion}"

    compile "org.apache.camel:camel-core:${camelVersion}"
    compile "org.apache.camel:camel-spring:${camelVersion}"
    compile "org.apache.camel:camel-cxf:${camelVersion}"
    compile "org.apache.camel:camel-jms:${camelVersion}"
    compile "org.apache.camel:camel-jdbc:${camelVersion}"
    //compile "org.apache.camel:camel-mail:${camelVersion}"

    compile "org.apache.cxf:cxf-rt-frontend-jaxrs:${cxfVersion}"
    compile "org.apache.cxf:cxf-rt-transports-http:${cxfVersion}"
    compile "org.apache.cxf:cxf-rt-transports-http-jetty:${cxfVersion}"

    compile "commons-dbcp:commons-dbcp:1.2.2"
    
    testCompile 'junit:junit:4.10'
    integrationTestCompile 'junit:junit:4.10'
}

repositories {
    mavenCentral()
}

task devdeploy(type:Copy) {
    from './build/libs'
    into '../vagrant-data/servicemix_hotdeploy'
}

task cleanServer() {
    it.dependsOn clean
}

task server() { 
    it.dependsOn clean
    it.dependsOn build
    it.dependsOn devdeploy
}

// Rules for which order things must be run when combined.
devdeploy.mustRunAfter build
build.mustRunAfter clean

// Added testing tasks
// Ordinary unit tests - should always be run before signing off the jar file
test {
	// listen to events in the test execution lifecycle
	beforeTest { descriptor ->
		logger.lifecycle("Running " + descriptor)
	}

	// listen to standard out and standard error of the test JVM(s)
	onOutput { descriptor, event ->
    	logger.lifecycle("" + descriptor + " produced standard out/err: " + event.message )
	}
}


// Integration tests - at the moment only run on demand
// with ./gradle clean build (devdeploy) integrationTest
task integrationTest(type: Test) {
	description = "Runs the integration tests"
	testClassesDir = sourceSets.integrationTest.output.classesDir
	classpath += sourceSets.integrationTest.runtimeClasspath
	
	// listen to events in the test execution lifecycle
	beforeTest { descriptor ->
		logger.lifecycle("Running integration " + descriptor)
	}

	// listen to standard out and standard error of the test JVM(s)
	onOutput { descriptor, event ->
    	logger.lifecycle("Integration " + descriptor + " produced standard out/err: " + event.message )
	}
}

// External integration test - run on all setup
// Run with clean build devDeploy integrationTest
// The host name is the same as in the vagrant-setup file ../vagrantFile
task integrationTestExternal(type: JavaExec) {
    main = 'se.unify.CXFClient'
    classpath = sourceSets.integrationTest.output
	args = ["http://192.168.33.10:9090/unify/invoices", "./build/resources/integrationTest/invoice.xml", "PUT"]
}



